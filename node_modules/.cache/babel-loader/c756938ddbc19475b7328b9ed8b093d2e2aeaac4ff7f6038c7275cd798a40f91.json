{"ast":null,"code":"var _jsxFileName = \"C:\\\\clone\\\\my-app\\\\src\\\\contexts\\\\FavoritesContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// context create \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FavoritesContext = /*#__PURE__*/createContext();\n\n// Create a Provider Component\nexport const FavoritesProvider = ({\n  children\n}) => {\n  _s();\n  const [favorites, setFavorites] = useState([]);\n\n  // get favorites from localStorage \n  useEffect(() => {\n    const storedFavorites = localStorage.getItem('react-movie-app-favorites');\n    if (storedFavorites) {\n      setFavorites(JSON.parse(storedFavorites));\n    }\n  }, []);\n\n  // Save favorites to localStorage \n  useEffect(() => {\n    localStorage.setItem('react-movie-app-favorites', JSON.stringify(favorites));\n  }, [favorites]);\n\n  // Function to add a movie to favorites\n  const addToFavorites = movie => {\n    // Prevent duplicates\n    const isAlreadyFavorite = favorites.some(fav => fav.imdbID === movie.imdbID);\n    if (!isAlreadyFavorite) {\n      setFavorites([...favorites, movie]);\n    }\n  };\n\n  //  remove a movie from favorites---\n  const removeFromFavorites = movieId => {\n    setFavorites(favorites.filter(movie => movie.imdbID !== movieId));\n  };\n  return /*#__PURE__*/_jsxDEV(FavoritesContext.Provider, {\n    value: {\n      favorites,\n      addToFavorites,\n      removeFromFavorites\n    },\n    children: [\" \", children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(FavoritesProvider, \"Ta5Hg12StVSJiEMWMKYcop5OdxE=\");\n_c = FavoritesProvider;\nvar _c;\n$RefreshReg$(_c, \"FavoritesProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","FavoritesContext","FavoritesProvider","children","_s","favorites","setFavorites","storedFavorites","localStorage","getItem","JSON","parse","setItem","stringify","addToFavorites","movie","isAlreadyFavorite","some","fav","imdbID","removeFromFavorites","movieId","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/clone/my-app/src/contexts/FavoritesContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// context create \r\nexport const FavoritesContext = createContext();\r\n\r\n// Create a Provider Component\r\nexport const FavoritesProvider = ({ children }) => {\r\n  const [favorites, setFavorites] = useState([]);\r\n\r\n  // get favorites from localStorage \r\n  useEffect(() => {\r\n    const storedFavorites = localStorage.getItem('react-movie-app-favorites');\r\n    if (storedFavorites) {\r\n      setFavorites(JSON.parse(storedFavorites));\r\n    }\r\n  }, []);\r\n\r\n  // Save favorites to localStorage \r\n  useEffect(() => {\r\n    localStorage.setItem('react-movie-app-favorites', JSON.stringify(favorites));\r\n  }, [favorites]);\r\n    \r\n  // Function to add a movie to favorites\r\n  const addToFavorites = (movie) => {\r\n    // Prevent duplicates\r\n    const isAlreadyFavorite = favorites.some((fav) => fav.imdbID === movie.imdbID);\r\n    if (!isAlreadyFavorite) {\r\n      setFavorites([...favorites, movie]);\r\n    }\r\n  };\r\n\r\n//  remove a movie from favorites---\r\n  const removeFromFavorites = (movieId) => {\r\n    setFavorites(favorites.filter((movie) => movie.imdbID !== movieId));\r\n  };\r\n\r\n  return (\r\n    <FavoritesContext.Provider\r\n       value={{ favorites, addToFavorites, removeFromFavorites }} > {children}\r\n    </FavoritesContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,CAAC;;AAE/C;AACA,OAAO,MAAMM,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,2BAA2B,CAAC;IACzE,IAAIF,eAAe,EAAE;MACnBD,YAAY,CAACI,IAAI,CAACC,KAAK,CAACJ,eAAe,CAAC,CAAC;IAC3C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAT,SAAS,CAAC,MAAM;IACdU,YAAY,CAACI,OAAO,CAAC,2BAA2B,EAAEF,IAAI,CAACG,SAAS,CAACR,SAAS,CAAC,CAAC;EAC9E,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMS,cAAc,GAAIC,KAAK,IAAK;IAChC;IACA,MAAMC,iBAAiB,GAAGX,SAAS,CAACY,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,MAAM,KAAKJ,KAAK,CAACI,MAAM,CAAC;IAC9E,IAAI,CAACH,iBAAiB,EAAE;MACtBV,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEU,KAAK,CAAC,CAAC;IACrC;EACF,CAAC;;EAEH;EACE,MAAMK,mBAAmB,GAAIC,OAAO,IAAK;IACvCf,YAAY,CAACD,SAAS,CAACiB,MAAM,CAAEP,KAAK,IAAKA,KAAK,CAACI,MAAM,KAAKE,OAAO,CAAC,CAAC;EACrE,CAAC;EAED,oBACErB,OAAA,CAACC,gBAAgB,CAACsB,QAAQ;IACvBC,KAAK,EAAE;MAAEnB,SAAS;MAAES,cAAc;MAAEM;IAAoB,CAAE;IAAAjB,QAAA,GAAE,GAAC,EAACA,QAAQ;EAAA;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEhC,CAAC;AAACxB,EAAA,CAnCWF,iBAAiB;AAAA2B,EAAA,GAAjB3B,iBAAiB;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}