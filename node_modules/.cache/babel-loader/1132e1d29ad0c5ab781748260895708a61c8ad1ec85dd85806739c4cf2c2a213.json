{"ast":null,"code":"var _jsxFileName = \"C:\\\\clone\\\\my-app\\\\Imdb-clone\\\\src\\\\contexts\\\\FavoritesContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FavoritesContext = /*#__PURE__*/createContext();\n\n// Provider Component\nexport const FavoritesProvider = ({\n  children\n}) => {\n  _s();\n  const [favorites, setFavorites] = useState([]);\n\n  // Load favorites from localStorage when the component mounts\n  useEffect(() => {\n    const storedFavorites = localStorage.getItem('react-movie-app-favorites');\n    if (storedFavorites) {\n      setFavorites(JSON.parse(storedFavorites)); // Parse stored JSON string to array\n    }\n  }, []);\n\n  // Save favorites to localStorage whenever favorites state changes\n  useEffect(() => {\n    if (favorites.length > 0) {\n      localStorage.setItem('react-movie-app-favorites', JSON.stringify(favorites));\n    }\n  }, [favorites]);\n\n  // Function to add a movie to favorites\n  const addToFavorites = movie => {\n    setFavorites(prevFavorites => [...prevFavorites, movie]);\n  };\n\n  // Function to remove a movie from favorites\n  const removeFromFavorites = movieId => {\n    setFavorites(favorites.filter(movie => movie.imdbID !== movieId));\n  };\n  return /*#__PURE__*/_jsxDEV(FavoritesContext.Provider, {\n    value: {\n      favorites,\n      addToFavorites,\n      removeFromFavorites\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(FavoritesProvider, \"Ta5Hg12StVSJiEMWMKYcop5OdxE=\");\n_c = FavoritesProvider;\nvar _c;\n$RefreshReg$(_c, \"FavoritesProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","FavoritesContext","FavoritesProvider","children","_s","favorites","setFavorites","storedFavorites","localStorage","getItem","JSON","parse","length","setItem","stringify","addToFavorites","movie","prevFavorites","removeFromFavorites","movieId","filter","imdbID","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/clone/my-app/Imdb-clone/src/contexts/FavoritesContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const FavoritesContext = createContext();\r\n\r\n// Provider Component\r\nexport const FavoritesProvider = ({ children }) => {\r\n  const [favorites, setFavorites] = useState([]);\r\n\r\n  // Load favorites from localStorage when the component mounts\r\n  useEffect(() => {\r\n    const storedFavorites = localStorage.getItem('react-movie-app-favorites');\r\n    if (storedFavorites) {\r\n      setFavorites(JSON.parse(storedFavorites)); // Parse stored JSON string to array\r\n    }\r\n  }, []);\r\n\r\n  // Save favorites to localStorage whenever favorites state changes\r\n  useEffect(() => {\r\n    if (favorites.length > 0) {\r\n      localStorage.setItem('react-movie-app-favorites', JSON.stringify(favorites));\r\n    }\r\n  }, [favorites]);\r\n\r\n  // Function to add a movie to favorites\r\n  const addToFavorites = (movie) => {\r\n    setFavorites((prevFavorites) => [...prevFavorites, movie]);\r\n  };\r\n\r\n  // Function to remove a movie from favorites\r\n  const removeFromFavorites = (movieId) => {\r\n    setFavorites(favorites.filter((movie) => movie.imdbID !== movieId));\r\n  };\r\n\r\n  return (\r\n    <FavoritesContext.Provider value={{ favorites, addToFavorites, removeFromFavorites }}>\r\n      {children}\r\n    </FavoritesContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,CAAC;;AAE/C;AACA,OAAO,MAAMM,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,2BAA2B,CAAC;IACzE,IAAIF,eAAe,EAAE;MACnBD,YAAY,CAACI,IAAI,CAACC,KAAK,CAACJ,eAAe,CAAC,CAAC,CAAC,CAAC;IAC7C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAT,SAAS,CAAC,MAAM;IACd,IAAIO,SAAS,CAACO,MAAM,GAAG,CAAC,EAAE;MACxBJ,YAAY,CAACK,OAAO,CAAC,2BAA2B,EAAEH,IAAI,CAACI,SAAS,CAACT,SAAS,CAAC,CAAC;IAC9E;EACF,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMU,cAAc,GAAIC,KAAK,IAAK;IAChCV,YAAY,CAAEW,aAAa,IAAK,CAAC,GAAGA,aAAa,EAAED,KAAK,CAAC,CAAC;EAC5D,CAAC;;EAED;EACA,MAAME,mBAAmB,GAAIC,OAAO,IAAK;IACvCb,YAAY,CAACD,SAAS,CAACe,MAAM,CAAEJ,KAAK,IAAKA,KAAK,CAACK,MAAM,KAAKF,OAAO,CAAC,CAAC;EACrE,CAAC;EAED,oBACEnB,OAAA,CAACC,gBAAgB,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAElB,SAAS;MAAEU,cAAc;MAAEG;IAAoB,CAAE;IAAAf,QAAA,EAClFA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAACvB,EAAA,CAjCWF,iBAAiB;AAAA0B,EAAA,GAAjB1B,iBAAiB;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}